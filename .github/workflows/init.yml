name: Initial Setup
on:
  workflow_dispatch:
    inputs:
      github-api-key:
        description: "Github API Key"
        required: true
      gcloud-token:
        description: "Base64 encoded google cloud key"
        required: true
      billing-account-id:
        description: "Billing account id to link to the projects"
        required: true
      project-folder-id:
        description: "Folder to add projects to (ID from google could resources management)"
        required: true
      region:
        description: "Region to deploy services to (default is europe-north1)"
        required: false
        type: choice
        default: "europe-north1"
        options:
          - "europe-north1"
          - "us-central1"
          - "asia-east1"
          - "europe-west1"

env:
  GH_TOKEN: ${{github.event.inputs.github-api-key }}

jobs:
  configure-github:
    runs-on: ubuntu-latest

    steps:
      - uses: "actions/checkout@v3"

      - name: Save root password
        run: gh secret set DATABASE_ROOT_PASSWORD --app actions --body $(openssl rand -hex 32)

      - name: Save password
        run: gh secret set DATABASE_PASSWORD --app actions --body $(openssl rand -hex 32)

      - name: "Save secrets"
        run: |
          gh secret set GOOGLE_CLOUD_TOKEN --app actions --body "${{github.event.inputs.gcloud-token }}"
          gh secret set GOOGLE_CLOUD_REGION --app actions --body "${{github.event.inputs.region }}"
          gh secret set GOOGLE_CLOUD_BILLING_ACCOUNT_ID --app actions --body "${{ github.event.inputs.billing-account-id }}"
          gh secret set GOOGLE_CLOUD_FOLDER_ID --app actions --body "${{ github.event.inputs.project-folder-id}}"

  initialize:
    runs-on: ubuntu-latest
    needs: configure-github

    strategy:
      matrix:
        environment: ["stg", "prod"]
    env:
      PROJECT: ${{ github.event.repository.name }}-${{matrix.environment}}-5
      PROJECT_NAME: "${{ github.event.repository.name }} ${{matrix.environment}}"

    steps:
      - uses: "actions/checkout@v3"

      - name: Print info
        run: |
          echo "Using $PROJECT as project ID and $PROJECT_NAME as name"

      - name: "Unpack Key"
        id: "google-key"
        run: |
          GOOGLE_CLOUD_TOKEN=$(echo ${{secrets.GOOGLE_CLOUD_TOKEN}} | base64 --decode)
          echo "GOOGLE_CLOUD_TOKEN=$GOOGLE_CLOUD_TOKEN" >> $GITHUB_OUTPUT

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{steps.google-key.outputs.GOOGLE_CLOUD_TOKEN}}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Info
        run: gcloud info

      - name: "Create Project"
        run: |
          gcloud projects create $PROJECT --name "$PROJECT_NAME" --folder=${{secrets.GOOGLE_CLOUD_FOLDER_ID}} --set-as-default
          gcloud config set project $PROJECT
          gcloud info

      - name: "Install support components"
        run: |
          gcloud --project $PROJECT components install alpha 
          gcloud --project $PROJECT components install beta

      - name: "Configure billing"
        run: |
          gcloud --project $PROJECT services enable cloudbilling.googleapis.com
          gcloud alpha billing projects link $PROJECT --billing-account ${{secrets.GOOGLE_CLOUD_BILLING_ACCOUNT_ID}}

      - name: "Turn on features"
        run: |
          gcloud --project $PROJECT services enable compute.googleapis.com sqladmin.googleapis.com run.googleapis.com containerregistry.googleapis.com cloudbuild.googleapis.com servicenetworking.googleapis.com vpcaccess.googleapis.com

      - name: "Provision PostgreSQL"
        run: gcloud --project $PROJECT sql instances create fvst-primary-db --database-version=POSTGRES_14 --cpu=1 --memory=4GB --region=${{secrets.GOOGLE_CLOUD_REGION}} --root-password="${{secrets.DATABASE_ROOT_PASSWORD}}"

      - name: "Create Database"
        run: gcloud --project $PROJECT sql databases create fvst --instance=fvst-primary-db

      - name: "Create Database User"
        run: gcloud --project $PROJECT sql users create fvst --instance=fvst-primary-db --password="${{secrets.DATABASE_PASSWORD}}"
