name: Google Branch

on:
  push:
    branches: [stg]

env:
  PROJECT: ${{ github.event.repository.name }}-stg-3
  DOCKER_TAG: v0.0.${{ github.run_number }}
  DB_INSTANCE: fvst-primary-db

jobs:
  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["demo", "auth"]
    steps:
      - uses: "actions/checkout@v3"

      - name: "Unpack Key"
        id: "google-key"
        run: |
          GOOGLE_CLOUD_TOKEN=$(echo ${{secrets.GOOGLE_CLOUD_TOKEN}} | base64 --decode)
          echo "GOOGLE_CLOUD_TOKEN=$GOOGLE_CLOUD_TOKEN" >> $GITHUB_OUTPUT

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{steps.google-key.outputs.GOOGLE_CLOUD_TOKEN}}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 417.0.0"

      - name: Info
        run: |
          gcloud info

      - name: Login to artifact repository
        run: gcloud --project $PROJECT auth configure-docker

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm test

      - name: Build
        run: npm run build

      - name: Build Docker
        run: |
          cd apps/${{matrix.service}} 
          docker build -f Dockerfile . -t gcr.io/$PROJECT/fvst-monorepo-${{matrix.service}}:$DOCKER_TAG
      - name: Push to repo
        run: docker push gcr.io/$PROJECT/fvst-monorepo-${{matrix.service}}:$DOCKER_TAG

      - name: Deploy
        run: |
          gcloud --project $PROJECT run deploy ${{matrix.service}} --image gcr.io/$PROJECT/fvst-monorepo-${{matrix.service}}:$DOCKER_TAG --add-cloudsql-instances $DB_INSTANCE --region ${{secrets.GOOGLE_CLOUD_REGION}} --set-env-vars DATABASE_URL="postgresql://fvst:${{secrets.DATABASE_PASSWORD}}@localhost/fvst?host=/cloudsql/$PROJECT:${{secrets.GOOGLE_CLOUD_REGION}}:$DB_INSTANCE" --set-env-vars NODE_ENV=development --allow-unauthenticated

  deploy-gateway:
    runs-on: ubuntu-latest
    needs: verify

    steps:
      - uses: "actions/checkout@v3"

      - name: "Unpack Key"
        id: "google-key"
        run: |
          GOOGLE_CLOUD_TOKEN=$(echo ${{secrets.GOOGLE_CLOUD_TOKEN}} | base64 --decode)
          echo "GOOGLE_CLOUD_TOKEN=$GOOGLE_CLOUD_TOKEN" >> $GITHUB_OUTPUT

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{steps.google-key.outputs.GOOGLE_CLOUD_TOKEN}}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 417.0.0"

      - name: Info
        run: |
          gcloud info

      - name: Login to artifact repository
        run: gcloud --project $PROJECT auth configure-docker

      - name: Build gateway
        run: docker build -f apps/apollo-gateway/Dockerfile -t gcr.io/$PROJECT/fvst-monorepo-gateway:$DOCKER_TAG .

      - name: Push to repo
        run: docker push gcr.io/$PROJECT/fvst-monorepo-gateway:$DOCKER_TAG

      - name: Install rover
        run: curl -sSL https://rover.apollo.dev/nix/latest | sh

      - name: Sync schema
        run: |
          chmod +x apps/apollo-gateway/publish_ci_schema_updates.sh
          export APOLLO_KEY=${{secrets.APOLLO_STUDIO_KEY}}
          export APOLLO_GRAPH_REF=${{secrets.APOLLO_STUDIO_GRAPH}}@${GITHUB_REF##*/}
          ./apps/apollo-gateway/publish_ci_schema_updates.sh

      - name: Deploy
        run: |
          export APOLLO_GRAPH_REF="${{secrets.APOLLO_STUDIO_GRAPH}}@${GITHUB_REF##*/}"
          gcloud --project $PROJECT run deploy gateway --image gcr.io/$PROJECT/fvst-monorepo-gateway:$DOCKER_TAG --port 4000 --region ${{secrets.GOOGLE_CLOUD_REGION}} --set-env-vars APOLLO_KEY=${{secrets.APOLLO_STUDIO_KEY}} --set-env-vars APOLLO_GRAPH_REF=$APOLLO_GRAPH_REF --allow-unauthenticated
